-- Организации
CREATE TABLE orgs (
  -- Идентификатор организации
  id                 INT NOT NULL PRIMARY KEY AUTOINCREMENT,
  -- Наименование организации
  name               TEXT NOT NULL,
  -- ИНН
  inn                TEXT,
  -- Активная группа
  activeGroupId      INT,
  -- Дата последней оплаты
  lastPay            DATE,
  -- Итоговая сумма оплаты
  totalSum           REAL
);
CREATE UNIQUE INDEX orgs_index ON orgs (name);

-- Графики
CREATE TABLE schedules (
  -- Идентификатор графика
  id                 INT NOT NULL PRIMARY KEY AUTOINCREMENT,
  -- Код графика в виде "пн,ср 1ч;вт,чт 2ч"
  code               TEXT NOT NULL
);
CREATE UNIQUE INDEX schedules_index ON schedules (code);

-- Дни графиков
CREATE TABLE schedule_days (
  -- Идентификатор дня недели графика
  id                 INT NOT NULL PRIMARY KEY AUTOINCREMENT,
  -- Идентификатор графика
  scheduleId         INT NOT NULL REFERENCES schedules (id) ON DELETE CASCADE,
  -- Номер дня начинается с нуля
  dayNumber          INT NOT NULL,
  -- Норма часов
  hoursNorm          REAL NOT NULL
);
CREATE UNIQUE INDEX schedule_days_index ON schedule_days (scheduleId, dayNumber);

-- Праздники
CREATE TABLE holidays (
  -- Идентификатор праздника
  id                 INT NOT NULL PRIMARY KEY AUTOINCREMENT,
  -- Праздничный день
  date               DATE NOT NULL,
  -- Рабочий день
  workday            DATE
);
CREATE UNIQUE INDEX holidays_index ON holidays (date);
CREATE UNIQUE INDEX holidays_workday_index ON holidays (workday);

-- Группы
CREATE TABLE "groups" (
  -- Идентификатор группы
  id                 INT NOT NULL PRIMARY KEY AUTOINCREMENT,
  -- Идентификатор организации
  orgId              INT NOT NULL REFERENCES orgs (id),
  -- Наименование группы
  name               TEXT NOT NULL,
  -- Идентификатор графика
  scheduleId         INT NOT NULL REFERENCES schedules (id),
  -- Питание: null - нет, 1 - 2 года и младше, 2 - от 3 лет
  meals              INT
);
CREATE UNIQUE INDEX groups_index ON "groups" (orgId, name);
CREATE INDEX groups_schedule_index ON "groups" (scheduleId);

-- Персоны
CREATE TABLE persons (
  -- Идентификатор персоны
  id                 INT NOT NULL PRIMARY KEY AUTOINCREMENT,
  -- Фамилия
  family             TEXT NOT NULL,
  -- Имя
  name               TEXT NOT NULL,
  -- Отчество
  middleName         TEXT,
  -- Дата рождения
  birthday           DATE,
  -- Телефон
  phone              TEXT,
  -- Телефон 2
  phone2             TEXT

);
CREATE UNIQUE INDEX persons_index ON persons (family, name, middleName, birthday);

-- Персоны в группе
CREATE TABLE group_persons (
  -- Идентификатор связи персоны с группой
  id                 INT NOT NULL PRIMARY KEY AUTOINCREMENT,
  -- Идентификатор группы
  groupId            INT NOT NULL REFERENCES "groups" (id),
  -- Идентификатор персоны
  personId           INT NOT NULL REFERENCES persons (id),
  -- Дата поступления в группу
  beginDate          DATE,
  -- Дата дата выбытия из группы
  endDate            DATE
);
CREATE UNIQUE INDEX group_persons_index ON group_persons (groupId, personId);

-- Посещаемость персон в группах
CREATE TABLE attendances (
  -- Идентификатор посещаемости
  id                 INT NOT NULL PRIMARY KEY AUTOINCREMENT,
  -- Идентификатор связи персоны с группой
  groupPersonId  INT NOT NULL REFERENCES group_persons (id) ON DELETE CASCADE,
  -- Дата посещения
  date               DATE NOT NULL,
  -- Количество часов
  hoursFact          REAL NOT NULL,
  -- Отсутствие по болезни
  isIllness          BOOL NOT NULL DEFAULT FALSE
);
CREATE UNIQUE INDEX attendances_index ON attendances (groupPersonId, date);

-- Настройки
CREATE TABLE settings (
  -- Идентификатор настройки
  id                 INT NOT NULL PRIMARY KEY AUTOINCREMENT,
  -- Наименование настройки
  name               TEXT NOT NULL,
  -- Тип значения (0=text, 1=bool, 2=int, 3=real, 4=date)
  valueType          INT NOT NULL,
  -- Текстовое значение
  textValue          TEXT,
  -- Логическое значение
  boolValue          BOOL,
  -- Целочисленное значение
  intValue           INT,
  -- Действительное значение
  realValue          REAL,
  -- Значение даты
  dateValue          DATE,
  -- Признак пользовательской настройки
  isUserSetting      BOOL NOT NULL DEFAULT FALSE
);
CREATE UNIQUE INDEX settings_index ON settings (name);

-- Дни графика
_daysInSchedule:
SELECT *
  FROM schedule_days
 WHERE scheduleId = :scheduleId;

-- Первая организация в алфавитном порядке
_firstOrg:
SELECT *
  FROM orgs
 WHERE name =
       (
         SELECT MIN(name)
           FROM orgs
       );

-- Предыдущая организация перед заданной
_previousOrg:
SELECT *
  FROM orgs
 WHERE name =
       (
         SELECT MAX(name)
           FROM orgs
          WHERE name < :orgName
       );

-- Первый график в алфавитном порядке
_firstSchedule:
SELECT *
  FROM schedules
 WHERE code =
       (
         SELECT MIN(code)
           FROM schedules
       );

-- Предыдущий график перед заданным
_previousSchedule:
SELECT *
  FROM schedules
 WHERE code =
       (
         SELECT MAX(code)
           FROM schedules
          WHERE code < :scheduleCode
       );

-- Рабочие дни
_holidaysWorkdays:
SELECT *
  FROM holidays
 WHERE workday IS NOT NULL;

-- Первая группа организации в алфавитном порядке
_firstGroup:
SELECT *
  FROM "groups"
 WHERE orgId = :orgId
   AND name =
       (
         SELECT MIN(name)
           FROM "groups"
          WHERE orgId = :orgId
       );

-- Предыдущая группа перед заданной
_previousGroup:
SELECT *
  FROM "groups"
 WHERE orgId = :orgId
   AND name =
       (
         SELECT MAX(name)
           FROM "groups"
          WHERE name < :groupName
       );

-- Список организаций с количеством групп
_orgsView:
SELECT O.id,
       O.name,
       O.inn,
       O.activeGroupId,
       CAST((SELECT COUNT(*) FROM "groups" WHERE orgId = O.id) AS INT) AS groupCount
  FROM orgs O
 ORDER BY
       O.name,
       O.inn;

-- Список графиков с количеством групп
_schedulesView:
SELECT S.id,
       S.code,
       CAST((SELECT COUNT(*) FROM "groups" WHERE scheduleId = S.id) AS INT) AS groupCount
  FROM schedules S
 ORDER BY
       S.code;

-- Список групп организации с графиками и количеством персон
_groupsView:
SELECT G.id,
       G.orgId,
       G.name,
       G.scheduleId,
       S.code AS scheduleCode,
       G.meals,
       CAST((SELECT COUNT(*) FROM group_persons WHERE groupId = G.id) AS INT) AS personCount
  FROM "groups" G
 INNER JOIN schedules S ON S.id = G.scheduleId
 WHERE G.orgId = :orgId
 ORDER BY
       G.name,
       S.code;

-- Список питаний организации
_orgMeals:
SELECT G.orgId,
       G.meals
  FROM "groups" G
 WHERE G.orgId = :orgId
 GROUP BY
       G.orgId,
       G.meals
 ORDER BY
       G.orgId,
       G.meals;

-- Список персон с количеством групп
_personsView:
SELECT P.id,
       P.family,
       P.name,
       P.middleName,
       P.birthday,
       P.phone,
       P.phone2,
       CAST((SELECT COUNT(*) FROM group_persons WHERE personId = P.id) AS INT) AS groupCount
  FROM persons P
 ORDER BY
       P.family,
       P.name,
       P.middleName,
       P.birthday;

-- Поиск персоны
_findPerson:
SELECT P.id,
       P.family,
       P.name,
       P.middleName,
       P.birthday,
       P.phone,
       P.phone2
  FROM persons P
 WHERE P.family = :family
   AND P.name = :name
   AND (:middleName IS NULL OR :middleName = '' OR P.middleName = :middleName)
   AND (:birthday IS NULL OR P.birthday = :birthday);

-- Список персон в группе
_personsInGroup:
SELECT L.id,
       L.groupId,
       L.personId,
       L.beginDate,
       L.endDate,
       P.family,
       P.name,
       P.middleName,
       P.birthday,
       P.phone,
       P.phone2,
       CAST((SELECT COUNT(*) FROM attendances T WHERE T.groupPersonId = L.id) AS INT) AS attendanceCount
  FROM group_persons L
 INNER JOIN persons P ON P.id = L.personId
 WHERE L.groupId = :groupId
 ORDER BY
       P.family,
       P.name,
       P.middleName,
       P.birthday;

-- Список персон в группе за период
_personsInGroupPeriod:
SELECT L.id,
       L.groupId,
       L.personId,
       L.beginDate,
       L.endDate,
       P.family,
       P.name,
       P.middleName,
       P.birthday,
       P.phone,
       P.phone2,
       CAST((SELECT COUNT(*) FROM attendances T WHERE T.groupPersonId = L.id) AS INT) AS attendanceCount
  FROM group_persons L
 INNER JOIN persons P ON P.id = L.personId
 WHERE L.groupId = :groupId
   AND (L.endDate IS NULL OR L.endDate >= :periodBegin)
   AND (L.beginDate IS NULL OR L.beginDate <= :periodEnd)
 ORDER BY
       P.family,
       P.name,
       P.middleName,
       P.birthday;

-- Посещаемость персон в группе за период
_groupPersonAttendances:
SELECT T.*
  FROM group_persons L
 INNER JOIN attendances T ON T.groupPersonId = L.id
 WHERE L.groupId = :groupId
   AND (L.endDate IS NULL OR L.endDate >= :periodBegin)
   AND (L.beginDate IS NULL OR L.beginDate <= :periodEnd)
   AND T.date >= :periodBegin
   AND T.date <= :periodEnd;

-- Посещаемость в организации за период
_orgAttendances:
SELECT L.groupId,
       G.meals,
       T.*
  FROM "groups" G
 INNER JOIN group_persons L ON L.groupId = G.id
 INNER JOIN attendances T ON T.groupPersonId = L.id
 WHERE G.orgId = :orgId
   AND (L.endDate IS NULL OR L.endDate >= :periodBegin)
   AND (L.beginDate IS NULL OR L.beginDate <= :periodEnd)
   AND T.date >= :periodBegin
   AND T.date <= :periodEnd;

-- Активная организации
_activeOrg:
SELECT O.*
  FROM settings S
 INNER JOIN orgs O ON O.id = S.intValue
 WHERE S.name = 'activeOrg';

-- Установка активной организации
_setActiveOrg:
UPDATE settings SET intValue = :id WHERE name = 'activeOrg';

-- Активный график
_activeSchedule:
SELECT SCH.*
  FROM settings S
 INNER JOIN schedules SCH ON SCH.id = S.intValue
 WHERE S.name = 'activeSchedule';

-- Установка активного графика
_setActiveSchedule:
UPDATE settings SET intValue = :id WHERE name = 'activeSchedule';

-- Активная группа
_activeGroup:
SELECT G.id,
       G.orgId,
       G.name,
       G.scheduleId,
       S.code AS scheduleCode,
       G.meals,
       CAST((SELECT COUNT(*) FROM group_persons WHERE groupId = G.id) AS INT) AS personCount
  FROM orgs O
 INNER JOIN "groups" G ON G.id = O.activeGroupId
 INNER JOIN schedules S ON S.id = G.scheduleId
 WHERE O.id = :orgId;

-- Установка активной группы
_setActiveGroup:
UPDATE orgs SET activeGroupId = :activeGroupId WHERE id = :orgId;

-- Активный период
_activePeriod:
SELECT S.dateValue
  FROM settings S
 WHERE S.name = 'activePeriod';

-- Установка активного периода
_setActivePeriod:
UPDATE settings SET dateValue = :activePeriod WHERE name = 'activePeriod';
